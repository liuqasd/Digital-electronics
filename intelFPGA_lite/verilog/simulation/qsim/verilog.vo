// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"

// DATE "11/01/2021 22:00:32"

// 
// Device: Altera EP4CE6E22C8 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module verilog (
	clk,
	rst_n,
	clk_div);
input 	clk;
input 	rst_n;
output 	clk_div;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \clk_div~output_o ;
wire \clk~input_o ;
wire \cnt2~2_combout ;
wire \rst_n~input_o ;
wire \cnt2~1_combout ;
wire \cnt2~0_combout ;
wire \LessThan3~0_combout ;
wire \clk_div2~q ;
wire \cnt1~2_combout ;
wire \cnt1~1_combout ;
wire \cnt1~0_combout ;
wire \LessThan1~0_combout ;
wire \clk_div1~q ;
wire \clk_div~0_combout ;
wire [2:0] cnt2;
wire [2:0] cnt1;


cycloneive_io_obuf \clk_div~output (
	.i(\clk_div~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\clk_div~output_o ),
	.obar());
// synopsys translate_off
defparam \clk_div~output .bus_hold = "false";
defparam \clk_div~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \cnt2~2 (
// Equation(s):
// \cnt2~2_combout  = (!cnt2[2] & !cnt2[0])

	.dataa(cnt2[2]),
	.datab(cnt2[0]),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\cnt2~2_combout ),
	.cout());
// synopsys translate_off
defparam \cnt2~2 .lut_mask = 16'h1111;
defparam \cnt2~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \rst_n~input (
	.i(rst_n),
	.ibar(gnd),
	.o(\rst_n~input_o ));
// synopsys translate_off
defparam \rst_n~input .bus_hold = "false";
defparam \rst_n~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \cnt2[0] (
	.clk(!\clk~input_o ),
	.d(\cnt2~2_combout ),
	.asdata(vcc),
	.clrn(\rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(cnt2[0]),
	.prn(vcc));
// synopsys translate_off
defparam \cnt2[0] .is_wysiwyg = "true";
defparam \cnt2[0] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \cnt2~1 (
// Equation(s):
// \cnt2~1_combout  = (!cnt2[2] & (cnt2[1] $ (cnt2[0])))

	.dataa(gnd),
	.datab(cnt2[1]),
	.datac(cnt2[0]),
	.datad(cnt2[2]),
	.cin(gnd),
	.combout(\cnt2~1_combout ),
	.cout());
// synopsys translate_off
defparam \cnt2~1 .lut_mask = 16'h003C;
defparam \cnt2~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cnt2[1] (
	.clk(!\clk~input_o ),
	.d(\cnt2~1_combout ),
	.asdata(vcc),
	.clrn(\rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(cnt2[1]),
	.prn(vcc));
// synopsys translate_off
defparam \cnt2[1] .is_wysiwyg = "true";
defparam \cnt2[1] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \cnt2~0 (
// Equation(s):
// \cnt2~0_combout  = (cnt2[1] & (cnt2[0] & !cnt2[2]))

	.dataa(cnt2[1]),
	.datab(cnt2[0]),
	.datac(gnd),
	.datad(cnt2[2]),
	.cin(gnd),
	.combout(\cnt2~0_combout ),
	.cout());
// synopsys translate_off
defparam \cnt2~0 .lut_mask = 16'h0088;
defparam \cnt2~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cnt2[2] (
	.clk(!\clk~input_o ),
	.d(\cnt2~0_combout ),
	.asdata(vcc),
	.clrn(\rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(cnt2[2]),
	.prn(vcc));
// synopsys translate_off
defparam \cnt2[2] .is_wysiwyg = "true";
defparam \cnt2[2] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \LessThan3~0 (
// Equation(s):
// \LessThan3~0_combout  = (cnt2[2]) # (cnt2[1])

	.dataa(cnt2[2]),
	.datab(cnt2[1]),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\LessThan3~0_combout ),
	.cout());
// synopsys translate_off
defparam \LessThan3~0 .lut_mask = 16'hEEEE;
defparam \LessThan3~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas clk_div2(
	.clk(!\clk~input_o ),
	.d(\LessThan3~0_combout ),
	.asdata(vcc),
	.clrn(\rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\clk_div2~q ),
	.prn(vcc));
// synopsys translate_off
defparam clk_div2.is_wysiwyg = "true";
defparam clk_div2.power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \cnt1~2 (
// Equation(s):
// \cnt1~2_combout  = (!cnt1[2] & !cnt1[0])

	.dataa(cnt1[2]),
	.datab(cnt1[0]),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\cnt1~2_combout ),
	.cout());
// synopsys translate_off
defparam \cnt1~2 .lut_mask = 16'h1111;
defparam \cnt1~2 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cnt1[0] (
	.clk(\clk~input_o ),
	.d(\cnt1~2_combout ),
	.asdata(vcc),
	.clrn(\rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(cnt1[0]),
	.prn(vcc));
// synopsys translate_off
defparam \cnt1[0] .is_wysiwyg = "true";
defparam \cnt1[0] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \cnt1~1 (
// Equation(s):
// \cnt1~1_combout  = (!cnt1[2] & (cnt1[1] $ (cnt1[0])))

	.dataa(gnd),
	.datab(cnt1[1]),
	.datac(cnt1[0]),
	.datad(cnt1[2]),
	.cin(gnd),
	.combout(\cnt1~1_combout ),
	.cout());
// synopsys translate_off
defparam \cnt1~1 .lut_mask = 16'h003C;
defparam \cnt1~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cnt1[1] (
	.clk(\clk~input_o ),
	.d(\cnt1~1_combout ),
	.asdata(vcc),
	.clrn(\rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(cnt1[1]),
	.prn(vcc));
// synopsys translate_off
defparam \cnt1[1] .is_wysiwyg = "true";
defparam \cnt1[1] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \cnt1~0 (
// Equation(s):
// \cnt1~0_combout  = (cnt1[1] & (cnt1[0] & !cnt1[2]))

	.dataa(cnt1[1]),
	.datab(cnt1[0]),
	.datac(gnd),
	.datad(cnt1[2]),
	.cin(gnd),
	.combout(\cnt1~0_combout ),
	.cout());
// synopsys translate_off
defparam \cnt1~0 .lut_mask = 16'h0088;
defparam \cnt1~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cnt1[2] (
	.clk(\clk~input_o ),
	.d(\cnt1~0_combout ),
	.asdata(vcc),
	.clrn(\rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(cnt1[2]),
	.prn(vcc));
// synopsys translate_off
defparam \cnt1[2] .is_wysiwyg = "true";
defparam \cnt1[2] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \LessThan1~0 (
// Equation(s):
// \LessThan1~0_combout  = (cnt1[2]) # (cnt1[1])

	.dataa(cnt1[2]),
	.datab(cnt1[1]),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\LessThan1~0_combout ),
	.cout());
// synopsys translate_off
defparam \LessThan1~0 .lut_mask = 16'hEEEE;
defparam \LessThan1~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas clk_div1(
	.clk(\clk~input_o ),
	.d(\LessThan1~0_combout ),
	.asdata(vcc),
	.clrn(\rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\clk_div1~q ),
	.prn(vcc));
// synopsys translate_off
defparam clk_div1.is_wysiwyg = "true";
defparam clk_div1.power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \clk_div~0 (
// Equation(s):
// \clk_div~0_combout  = (!\clk_div1~q ) # (!\clk_div2~q )

	.dataa(gnd),
	.datab(gnd),
	.datac(\clk_div2~q ),
	.datad(\clk_div1~q ),
	.cin(gnd),
	.combout(\clk_div~0_combout ),
	.cout());
// synopsys translate_off
defparam \clk_div~0 .lut_mask = 16'h0FFF;
defparam \clk_div~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign clk_div = \clk_div~output_o ;

endmodule
