// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/25/2021 20:14:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ly_2257_3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ly_2257_3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [3:0] d;
reg en;
reg ld;
reg ud;
// wires                                               
wire CO;
wire [3:0] Q;
wire [6:0] codeout;
wire seg;

// assign statements (if any)                          
ly_2257_3 i1 (
// port map - connection between master ports and signals/registers   
	.CO(CO),
	.Q(Q),
	.clk(clk),
	.clr(clr),
	.codeout(codeout),
	.d(d),
	.en(en),
	.ld(ld),
	.seg(seg),
	.ud(ud)
);
initial 
begin 
#1000000 $finish;
end 

// en
initial
begin
	en = 1'b1;
end 

// clk
initial
begin
	repeat(16)
	begin
		clk = 1'b0;
		clk = #30000 1'b1;
		# 30000;
	end
	clk = 1'b0;
	clk = #30000 1'b1;
end 

// clr
initial
begin
	clr = 1'b0;
end 

// ld
initial
begin
	ld = 1'b0;
end 

// ud
initial
begin
	ud = 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b1;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b1;
end 
endmodule

